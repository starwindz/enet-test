//
// g....cpp
void MPGame::sendGameSetting(int cmd)
{
    if (p2pMode == 0) {
        g_MPGameSetting[0].cmd = cmd;
        memcpy(g_udp_p2p.sent_buffer, &(g_MPGameSetting[0]), g_udp_p2p.buffer_size);
    }
    else {
        g_MPGameSetting[1].cmd = cmd;
        memcpy(g_udp_p2p.sent_buffer, &(g_MPGameSetting[1]), g_udp_p2p.buffer_size);
    }
    g_udp_p2p.send_buffer();
}
 
int MPGame::receiveGameSetting()
{
    // for pong data in case of ping received
    if (p2pMode == 0) {
        memcpy(g_udp_p2p.sent_buffer, &(g_MPGameSetting[0]), g_udp_p2p.buffer_size);
    }
    else {
        memcpy(g_udp_p2p.sent_buffer, &(g_MPGameSetting[1]), g_udp_p2p.buffer_size);
    }
    // receive ping and send pong packet
    int event = g_udp_p2p.receive_buffer();
 
    // process received packet
    if (event == ENET_EVENT_TYPE_RECEIVE) {
        if (p2pMode == 0) {
            int pt = g_MPGameSetting[1].pitchType;
            memcpy(&(g_MPGameSetting[1]), g_udp_p2p.received_buffer, g_udp_p2p.buffer_size);
            g_MPGameSetting[1].pitchType = pt;
            return g_MPGameSetting[1].cmd;
        }
        else {
            memcpy(&(g_MPGameSetting[0]), g_udp_p2p.received_buffer, g_udp_p2p.buffer_size);
            g_MPGameSetting[1].pitchType = g_MPGameSetting[0].pitchType;
            return g_MPGameSetting[0].cmd;
        }
    }
 
    return 0;
}
 
#define cm_Init   -1
#define cm_Normal  0
#define cm_Exit    1
 
void mpSettingMenu_OnInit()
{
    mg.sendGameSetting(cm_Init);  // connected
}
 
void mpSettingMenu_OnDraw()
{
    auto cmd = receiveGameSetting();
   
    if (cmd == cm_Exit) {  // disconnected
#if (1)
        g_DlgOkMode = 1;
        auto ok = showContinueAbortPrompt(
            "NETWORK CONNECTION", "", "OK",
            {
                "",
                "OPPONENT PLAYER DISCONNECTED",
                "",
            }
        );
        g_DlgOkMode = 0;
#endif
        mg.connectionStatus = false;
        resMPSettingMenu = 0;
        SetExitMenuFlag();
        return;
    }
    else if (cmd == cm_Init) { // connected
#if (1)
        g_DlgOkMode = 1;
        auto ok = showContinueAbortPrompt(
            "NETWORK CONNECTION", "", "OK",
            {
                "",
                "OPPONENT PLAYER CONNECTED",
                "",
            }
        );
        g_DlgOkMode = 0;
#endif
        mg.connectionStatus = true;
        mg.sendGameSetting(cm_Normal);
    }
...
   
void selectMPSettingExit()
{
    mg.sendGameSetting(cm_Exit);  // disconnected
 
    resMPSettingMenu = 0;
    SetExitMenuFlag();
}


